"""
Task Service

‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô
"""
from fastapi import HTTPException
from datetime import datetime
from app.repositories.task_repository import TaskRepository
from app.repositories.file_repository import FileRepository
from app.api.schemas.task_schemas import TaskCreate, TaskUpdate, TaskResponse
from app.api.schemas.response_schemas import ResponseModel, PaginatedResponse
from app.utils.advanced_performance import tracker
from bson import ObjectId
from typing import Dict, Any, List

class TaskService:
    """
    Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
    """
    def __init__(self, task_repository: TaskRepository, file_repository: FileRepository):
        self.task_repository = task_repository
        self.file_repository = file_repository
    
    @tracker.measure_async_time
    async def create_task(self, task_data: TaskCreate) -> ResponseModel:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        """
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ file_id ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not ObjectId.is_valid(task_data.file_id):
            raise HTTPException(status_code=400, detail="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö file_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        file = await self.file_repository.find_by_id(task_data.file_id)
        if not file:
            raise HTTPException(status_code=404, detail="üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô datetime
        try:
            created_file_date = datetime.strptime(task_data.created_file_date, "%Y-%m-%d")
            updated_file_date = datetime.strptime(task_data.updated_file_date, "%Y-%m-%d")
        except ValueError:
            raise HTTPException(status_code=400, detail="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD)")
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        task_dict = {
            "topic": task_data.topic,
            "created_file_date": created_file_date,
            "updated_file_date": updated_file_date,
            "references": task_data.references,
            "file_id": task_data.file_id,
            "is_done_created_doc": False,  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "column_names": [],            # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            "error_message": None
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô MongoDB
        created_task = await self.task_repository.create(task_dict)
        
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
        task_dict = {**created_task}
        task_dict["id"] = str(task_dict.pop("_id"))
        if isinstance(task_dict["created_file_date"], datetime):
            task_dict["created_file_date"] = task_dict["created_file_date"].strftime("%Y-%m-%d")
        if isinstance(task_dict["updated_file_date"], datetime):
            task_dict["updated_file_date"] = task_dict["updated_file_date"].strftime("%Y-%m-%d")
        if isinstance(task_dict["created_at"], datetime):
            task_dict["created_at"] = task_dict["created_at"].isoformat()
        if isinstance(task_dict["updated_at"], datetime):
            task_dict["updated_at"] = task_dict["updated_at"].isoformat()
        
        return ResponseModel(
            message="‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            data=task_dict
        )
    
    @tracker.measure_async_time
    async def get_all_tasks(self, page: int, limit: int) -> PaginatedResponse:
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        """
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
        skip = (page - 1) * limit
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        total_tasks = await self.task_repository.count()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ pagination
        tasks_list = await self.task_repository.find_all(skip, limit)
        
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
        tasks = []
        for task in tasks_list:
            task_dict = {**task}
            task_dict["id"] = str(task_dict.pop("_id"))
            if isinstance(task_dict["created_file_date"], datetime):
                task_dict["created_file_date"] = task_dict["created_file_date"].strftime("%Y-%m-%d")
            if isinstance(task_dict["updated_file_date"], datetime):
                task_dict["updated_file_date"] = task_dict["updated_file_date"].strftime("%Y-%m-%d")
            if isinstance(task_dict["created_at"], datetime):
                task_dict["created_at"] = task_dict["created_at"].isoformat()
            if isinstance(task_dict["updated_at"], datetime):
                task_dict["updated_at"] = task_dict["updated_at"].isoformat()
            tasks.append(task_dict)
        
        return PaginatedResponse(
            message="üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            total=total_tasks,
            page=page,
            limit=limit,
            pages=(total_tasks + limit - 1) // limit,
            data=tasks
        )
    
    @tracker.measure_async_time
    async def get_task(self, task_id: str) -> ResponseModel:
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
        """
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å MongoDB
        task = await self.task_repository.find_by_id(task_id)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not task:
            raise HTTPException(status_code=404, detail="üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
        task_dict = {**task}
        task_dict["id"] = str(task_dict.pop("_id"))
        if isinstance(task_dict["created_file_date"], datetime):
            task_dict["created_file_date"] = task_dict["created_file_date"].strftime("%Y-%m-%d")
        if isinstance(task_dict["updated_file_date"], datetime):
            task_dict["updated_file_date"] = task_dict["updated_file_date"].strftime("%Y-%m-%d")
        if isinstance(task_dict["created_at"], datetime):
            task_dict["created_at"] = task_dict["created_at"].isoformat()
        if isinstance(task_dict["updated_at"], datetime):
            task_dict["updated_at"] = task_dict["updated_at"].isoformat()
        
        return ResponseModel(
            message="üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô",
            data=task_dict
        )
    
    @tracker.measure_async_time
    async def update_task(self, task_id: str, task_update: TaskUpdate) -> ResponseModel:
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
        """
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_task = await self.task_repository.find_by_id(task_id)
        if not existing_task:
            raise HTTPException(status_code=404, detail="üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        update_data = {}
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà None ‡∏•‡∏á‡πÉ‡∏ô update_data
        task_dict = task_update.dict(exclude_unset=True)
        for field, value in task_dict.items():
            if value is not None:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô datetime ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                if field == "created_file_date" or field == "updated_file_date":
                    try:
                        update_data[field] = datetime.strptime(value, "%Y-%m-%d")
                    except ValueError:
                        raise HTTPException(status_code=400, detail=f"‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {field} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD)")
                else:
                    update_data[field] = value
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        if not update_data:
            raise HTTPException(status_code=400, detail="‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï file_id ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if "file_id" in update_data:
            if not ObjectId.is_valid(update_data["file_id"]):
                raise HTTPException(status_code=400, detail="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö file_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
            file = await self.file_repository.find_by_id(update_data["file_id"])
            if not file:
                raise HTTPException(status_code=404, detail="üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB
        updated_task = await self.task_repository.update(task_id, update_data)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if updated_task is None:
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            existing_task_dict = {**existing_task}
            existing_task_dict["id"] = str(existing_task_dict.pop("_id"))
            if isinstance(existing_task_dict["created_file_date"], datetime):
                existing_task_dict["created_file_date"] = existing_task_dict["created_file_date"].strftime("%Y-%m-%d")
            if isinstance(existing_task_dict["updated_file_date"], datetime):
                existing_task_dict["updated_file_date"] = existing_task_dict["updated_file_date"].strftime("%Y-%m-%d")
            if isinstance(existing_task_dict["created_at"], datetime):
                existing_task_dict["created_at"] = existing_task_dict["created_at"].isoformat()
            if isinstance(existing_task_dict["updated_at"], datetime):
                existing_task_dict["updated_at"] = existing_task_dict["updated_at"].isoformat()
            
            return ResponseModel(
                message="‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                data=existing_task_dict
            )
        
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
        updated_task_dict = {**updated_task}
        updated_task_dict["id"] = str(updated_task_dict.pop("_id"))
        if isinstance(updated_task_dict["created_file_date"], datetime):
            updated_task_dict["created_file_date"] = updated_task_dict["created_file_date"].strftime("%Y-%m-%d")
        if isinstance(updated_task_dict["updated_file_date"], datetime):
            updated_task_dict["updated_file_date"] = updated_task_dict["updated_file_date"].strftime("%Y-%m-%d")
        if isinstance(updated_task_dict["created_at"], datetime):
            updated_task_dict["created_at"] = updated_task_dict["created_at"].isoformat()
        if isinstance(updated_task_dict["updated_at"], datetime):
            updated_task_dict["updated_at"] = updated_task_dict["updated_at"].isoformat()
        
        return ResponseModel(
            message="‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            data=updated_task_dict
        )
    
    @tracker.measure_async_time
    async def delete_task(self, task_id: str) -> ResponseModel:
        """
        ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
        """
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å MongoDB
        deleted_task = await self.task_repository.delete(task_id)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not deleted_task:
            raise HTTPException(status_code=404, detail="üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
        
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
        task_dict = {**deleted_task}
        task_dict["id"] = str(task_dict.pop("_id"))
        if isinstance(task_dict["created_file_date"], datetime):
            task_dict["created_file_date"] = task_dict["created_file_date"].strftime("%Y-%m-%d")
        if isinstance(task_dict["updated_file_date"], datetime):
            task_dict["updated_file_date"] = task_dict["updated_file_date"].strftime("%Y-%m-%d")
        if isinstance(task_dict["created_at"], datetime):
            task_dict["created_at"] = task_dict["created_at"].isoformat()
        if isinstance(task_dict["updated_at"], datetime):
            task_dict["updated_at"] = task_dict["updated_at"].isoformat()
        
        return ResponseModel(
            message="üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            data=task_dict
        )