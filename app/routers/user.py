from fastapi import APIRouter, Query
from app.database import get_collection
from bson import ObjectId
from typing import List, Dict, Any

router = APIRouter(
  prefix="/user",
  tags=["users"],
  responses={404: { "description": "Not Found"}}
)

@router.get("/")
async def get_users(page: int = Query(1, ge=1), limit: int = Query(10, ge=1, le=100)):
  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö collection users
  users_collection = get_collection("users")
  
  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  skip = (page - 1) * limit
  
  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  total_users = await users_collection.count_documents({})
  
  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö pagination
  users_cursor = users_collection.find().skip(skip).limit(limit)
  users = await users_cursor.to_list(length=limit)
  
  # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ serialize ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ
  for user in users:
    if "_id" in user:
      user["_id"] = str(user["_id"])
  
  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  return {
    "message": "üë§ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "total": total_users,
    "page": page,
    "limit": limit,
    "pages": (total_users + limit - 1) // limit,  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    "users": users
  }