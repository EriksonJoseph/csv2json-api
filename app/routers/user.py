from fastapi import APIRouter, Query
from app.database import get_collection
from app.schema.schemas import list_serial
from bson import ObjectId
from typing import List, Dict, Any
import pprint

router = APIRouter(
  prefix="/user",
  tags=["users"],
  responses={404: { "description": "Not Found"}}
)

@router.get("/")
async def get_users(page: int = Query(1, ge=1), limit: int = Query(10, ge=1, le=100)):
  print(f"page: {page} | limit: {limit}")
  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö collection users
  users_collection = get_collection("users")
  
  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì skip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  skip = (page - 1) * limit
  
  # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ await ‡∏Å‡∏±‡∏ö Motor)
  total_users = users_collection.count_documents({})
  
  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ pagiantion
  users = list_serial(users_collection.find().skip(skip).limit(limit))

  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  return {
    "message": "üë§ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    "total": total_users,
    "page": page,
    "limit": limit,
    "pages": (total_users + limit - 1) // limit,
    "users": users
  }