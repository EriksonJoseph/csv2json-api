from fastapi import APIRouter, Query, HTTPException, Path
from app.services.task_service import TaskService
from app.repositories.task_repository import TaskRepository
from app.repositories.file_repository import FileRepository
from app.models.task import TaskCreate, TaskUpdate
from app.utils.advanced_performance import tracker
from app.exceptions import TaskException

router = APIRouter(
    prefix="/task",
    tags=["tasks"],
    responses={404: {"description": "Not Found"}}
)

# Initialize repositories and service
task_repository = TaskRepository()
file_repository = FileRepository()
task_service = TaskService(task_repository, file_repository)

@router.post("/")
@tracker.measure_async_time
async def create_task(task: TaskCreate):
    """
    üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    """
    try:
        created_task = await task_service.create_task(task)
        return {
            "message": "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            "task": created_task
        }
    except TaskException as e:
        raise HTTPException(status_code=e.status_code, detail=str(e))

@router.get("/")
@tracker.measure_async_time
async def get_all_tasks(page: int = Query(1, ge=1), limit: int = Query(10, ge=1, le=100)):
    """
    üìã ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    try:
        result = await task_service.get_all_tasks(page, limit)
        return {
            "tasks": result["tasks"],
            "total": result["total"],
            "page": result["page"],
            "limit": result["limit"]
        }
    except TaskException as e:
        raise HTTPException(status_code=e.status_code, detail=str(e))

@router.get("/{task_id}")
@tracker.measure_async_time
async def get_task(task_id: str = Path(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")):
    """
    üìù ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
    """
    try:
        task = await task_service.get_task_by_id(task_id)
        if not task:
            raise TaskException("Task not found", status_code=404)
        return {
            "message": "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            "task": task
        }
    except TaskException as e:
        raise HTTPException(status_code=e.status_code, detail=str(e))

@router.put("/{task_id}")
@tracker.measure_async_time
async def update_task(task_id: str, task_update: TaskUpdate):
    """
    üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
    """
    try:
        updated_task = await task_service.update_task(task_id, task_update)
        return {
            "message": "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            "task": updated_task
        }
    except TaskException as e:
        raise HTTPException(status_code=e.status_code, detail=str(e))
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    updated_task = await tasks_collection.find_one({"_id": ObjectId(task_id)})
    
    # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
    updated_task["_id"] = str(updated_task["_id"])
    updated_task["created_file_date"] = updated_task["created_file_date"].strftime("%Y-%m-%d")
    updated_task["updated_file_date"] = updated_task["updated_file_date"].strftime("%Y-%m-%d")
    updated_task["created_at"] = updated_task["created_at"].isoformat()
    updated_task["updated_at"] = updated_task["updated_at"].isoformat()
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return {
        "message": "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        "task": updated_task
    }

@router.delete("/{task_id}")
@tracker.measure_async_time
async def delete_task(task_id: str = Path(..., description="ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")):
    """
    üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID
    """
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö collection tasks
    tasks_collection = await get_collection("tasks")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á ID
    if not ObjectId.is_valid(task_id):
        raise HTTPException(status_code=400, detail="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    task = await tasks_collection.find_one({"_id": ObjectId(task_id)})
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not task:
        raise HTTPException(status_code=404, detail="üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
    
    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å MongoDB
    result = await tasks_collection.delete_one({"_id": ObjectId(task_id)})
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if result.deleted_count == 0:
        raise HTTPException(status_code=500, detail="‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞ datetime ‡πÄ‡∏õ‡πá‡∏ô string
    task["_id"] = str(task["_id"])
    task["created_file_date"] = task["created_file_date"].strftime("%Y-%m-%d")
    task["updated_file_date"] = task["updated_file_date"].strftime("%Y-%m-%d")
    task["created_at"] = task["created_at"].isoformat()
    task["updated_at"] = task["updated_at"].isoformat()
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    return {
        "message": "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        "deleted_task": task
    }